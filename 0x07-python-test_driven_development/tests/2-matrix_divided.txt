The ```2-matrix_divided.py``` module

```Importing module matrix_divided```
>>> matrix_divided = __import__('2-matrix_divided').matrix_divided

Number
# checks in data
>>> matrix = [[1,2,3],[4,5,6]]

>>> matrix_divided(matrix, 3)
[[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]

>>> matrix_9 = [[-1, -2, -3], [-4, -5, -6]]
>>> matrix_divided(matrix_9, 3)
[[-0.33, -0.67, -1.0], [-1.33, -1.67, -2.0]]

>>> matrix_7 = [[1, 2, 3, 3], [4.5, 5.4, 6.3, 7.7]]
>>> matrix_divided(matrix_7, 3)
[[0.33, 0.67, 1.0, 1.0], [1.5, 1.8, 2.1, 2.57]]

>>> matrix_5 = [[1, 2, 3, 3], [4, 5, 6, 7], [2, 7, 9, 5], [14, 25, 12, 4]]
>>> matrix_divided(matrix_5, 4)
[[0.25, 0.5, 0.75, 0.75], [1.0, 1.25, 1.5, 1.75], [0.5, 1.75, 2.25, 1.25], [3.5, 6.25, 3.0, 1.0]]

>>> matrix_divided(matrix)
Traceback (most recent call last):
TypeError: matrix_divided() missing 1 required positional argument: 'div'

Non-numbers

>>> matrix_divided([[1, 2, '3'], [4, 5, 6]], 3)
Traceback (most recent call last):
TypeError: matrix must be a matrix (list of lists) of integers/floats

>>> matrix_divided(matrix, '3')
Traceback (most recent call last):
TypeError: div must be a number

>>> matrix_divided(matrix, 0)
Traceback (most recent call last):
ZeroDivisionError: division by zero

>>> matrix_divided(matrix, float('inf'))
Traceback (most recent call last):
OverflowError: cannot convert float infinity to integer

>>> matrix_divided(matrix, float('NaN'))
Traceback (most recent call last):
ValueError: cannot convert float NaN to integer
